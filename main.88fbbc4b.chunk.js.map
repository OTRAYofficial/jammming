{"version":3,"sources":["Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Track","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTrack","bind","assertThisInitialized","removeTrack","onAdd","track","onRemove","react_default","a","createElement","className","name","artist","album","isRemoval","onClick","React","Component","TrackList","tracks","map","Components_Track_Track","key","id","Playlist","handleNameChange","event","onNameChange","target","value","defaultValue","onChange","Components_TrackList_TrackList","playlistTracks","onSave","SearchBar","state","term","search","handleTermChange","handleEnterKey","onSearch","setState","keyCode","placeholder","onKeyDown","SearchResults","searchResults","accessToken","Spotify","getAccessToken","length","urlAccessToken","undefined","urlTokenExpiresIn","url","window","location","href","match","expiresIn","setTimeout","history","pushState","concat","_search","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","abrupt","sent","stop","_x","apply","arguments","savePlaylist","playlistName","trackURIs","userID","method","body","JSON","stringify","playlistID","uris","App","updatePlaylistName","find","savedTrack","trackNo","findIndex","tr","splice","_this2","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88fbbc4b.chunk.js","sourcesContent":["import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.addTrack = this.addTrack.bind(this)\n        this.removeTrack = this.removeTrack.bind(this)\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track)\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track)\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n              <div className=\"Track-information\">\n                <h3>{this.props.track.name}</h3>\n                <p>{this.props.track.artist} | {this.props.track.album}</p>\n              </div>\n              {this.props.isRemoval ?  <button className=\"Track-action\" onClick={this.removeTrack}>ー</button> : <button onClick={this.addTrack}>＋</button> }\n            </div>\n        )\n    }\n}\n\nexport default Track","import React from 'react';\nimport './TrackList.css';\nimport Track from \"../Track/Track.js\"\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => \n                    <Track key={track.id} track={track} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />)\n                }\n            </div>\n        )\n    }\n}\n\nexport default TrackList","import React from 'react';\nimport './Playlist.css';\nimport TrackList from \"../TrackList/TrackList\"\n\nclass Playlist extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.handleNameChange = this.handleNameChange.bind(this)\n    }\n\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value)\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n              <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\n              <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n              <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            term: \"\"\n        }\n\n        this.search = this.search.bind(this)\n        this.handleTermChange = this.handleTermChange.bind(this)\n        this.handleEnterKey = this.handleEnterKey.bind(this)\n    }\n\n    search() {\n        this.props.onSearch(this.state.term)\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value })\n    }\n\n    // Search when EnterKey Pressed\n    handleEnterKey(event) {\n        if (event.keyCode === 13) {\n            this.search()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n              <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} onKeyDown={this.handleEnterKey} />\n              <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from \"../TrackList/TrackList\"\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n              <h2>Results</h2>\n              <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\n            </div>\n        )\n    }\n}\n\nexport default SearchResults","//import clientID from \"./clientID.js\"\n\nconst clientID = \"08a1d1ac7d8b498dac7a958bf68bb083\"\nconst redirectURI = \"https://otray_jammming_deploy.surge.sh/\" //window.location.href //\"http://localhost:3000/\"\nlet accessToken = \"\"\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken.length) return accessToken\n\n        let urlAccessToken = undefined\n        let urlTokenExpiresIn = undefined\n\n        const url = window.location.href\n        if (url.match(/access_token=([^&]*)/)) {\n            urlAccessToken = url.match(/access_token=([^&]*)/)\n            urlTokenExpiresIn = url.match(/expires_in=([^&]*)/)\n        }\n\n        if (urlAccessToken && urlTokenExpiresIn) {\n            accessToken = urlAccessToken[1]\n            const expiresIn = urlTokenExpiresIn[1]\n\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken\n        }\n        else {\n            window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n        }\n    },\n\n    async search(term) {\n        accessToken = this.getAccessToken()\n\n        return await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n                headers: { Authorization: `Bearer ${accessToken}` }\n            })\n            .then(response => response.json()).then(jsonResponse => {\n                if (!jsonResponse.tracks) return []\n                return jsonResponse.tracks.items.map(track => {\n                    return {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri\n                    }\n                })\n            })\n    },\n\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName.length && !trackURIs.length) return\n\n        accessToken = this.getAccessToken()\n        const headers = { Authorization: `Bearer ${accessToken}` }\n        let userID\n\n        fetch(`https://api.spotify.com/v1/me`, { headers: headers })\n            .then(response => response.json()).then(jsonResponse => {\n                userID = jsonResponse.id\n\n                // create playlist w/ tracks\n                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n                    headers: headers,\n                    method: \"POST\",\n                    body: JSON.stringify({ name: playlistName })\n\n                }).then(response => response.json()).then(jsonResponse => {\n                    const playlistID = jsonResponse.id\n\n                    // save tracks to playlist\n                    return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n                        headers: headers,\n                        method: \"POST\",\n                        body: JSON.stringify({ uris: trackURIs })\n                    })\n                })\n            })\n    }\n}\n\n\nexport default Spotify","import React from 'react';\nimport './App.css';\nimport Playlist from \"../Playlist/Playlist.js\"\nimport SearchBar from \"../SearchBar/SearchBar.js\"\nimport SearchResults from \"../SearchResults/SearchResults.js\"\nimport Spotify from \"../../util/Spotify.js\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      searchResults: [],\n\n      playlistName: \"New Playlist\",\n\n      playlistTracks: []\n    }\n\n    this.addTrack = this.addTrack.bind(this)\n    this.removeTrack = this.removeTrack.bind(this)\n    this.updatePlaylistName = this.updatePlaylistName.bind(this)\n    this.savePlaylist = this.savePlaylist.bind(this)\n    this.search = this.search.bind(this)\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return\n    }\n    this.setState({ playlistTracks: this.state.playlistTracks.concat(track) })\n  }\n\n  removeTrack(track) {\n    const trackNo = this.state.playlistTracks.findIndex(tr => tr.id === track.id)\n    this.setState(this.state.playlistTracks.splice(trackNo, 1))\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name })\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri)\n\n    if (this.state.playlistName && trackURIs.length > 0) {\n      Spotify.savePlaylist(this.state.playlistName, trackURIs)\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: [{ name: \"Successfully Saved!\" }]\n      })\n    }\n  }\n\n  search(term) {\n    Spotify.search(term)\n      .then(response => {\n        this.setState({ searchResults: response })\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}